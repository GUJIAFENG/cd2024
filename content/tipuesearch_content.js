var tipuesearch = {"pages": [{'title': '關於', 'text': '網頁：\xa0 https://gujiafeng.github.io/cd2024/content/index.html \n 網誌：\xa0\xa0  https://gujiafeng.github.io/cd2024/blog \n 簡報：\xa0\xa0 https://mdecd2024.github.io/2b-midbg8/reveal/ \n 倉儲：\xa0 https://github.com/GUJIAFENG/cd2024 \n 團隊倉儲： https://mdecd2024.github.io/2b-midbg8/content/index.html \n', 'tags': '', 'url': '關於.html'}, {'title': '課程活動', 'text': '', 'tags': '', 'url': '課程活動.html'}, {'title': 'W1建立個人倉儲和網頁，加入團隊github內容', 'text': 'w1心得：今天是開學的第一堂課，我們這堂課的細節是假設自己的github帳號加入到cd2024中、將自己的網址導入  \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0到replit中，並且設定github的雙重認證，今天的內容還算輕鬆。 \n', 'tags': '', 'url': 'W1建立個人倉儲和網頁，加入團隊github內容.html'}, {'title': 'W2分組並建立團隊倉儲和網頁，加入團隊github內容', 'text': 'w2心得：今天要先分組找組員並確認組別，然後用github教室創建組別並把組員加進去，好了之後小組成員就要開 \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0始添加github項目的內容了，這一步比較困難當時用了很久了。 \n', 'tags': '', 'url': 'W2分組並建立團隊倉儲和網頁，加入團隊github內容.html'}, {'title': 'W3利用Codespaces將自己github加入團隊倉儲的子模組', 'text': 'w3心得：這週利用Codespaces把自己github加入到團隊的子模組中，之後也可以利用codspaces來維護倉儲 \n', 'tags': '', 'url': 'W3利用Codespaces將自己github加入團隊倉儲的子模組.html'}, {'title': 'W4 Replit 匯入replit_main2.7z來查看靜態網站內容，上傳latex作業', 'text': 'w4心得：今天用codspaces創建資料夾latex、images和.github/workflows並上傳資料並用git add .推好 之後用 \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0Action的功能去run，之後再到.gitignore改程序碼讓他去刪除latex的臨時文檔，用好之後 我們這組把已 \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0完成的翻譯用成latex傳上去，今天課程活動較上禮拜多一些，今天主要的問題是 Action的ALL\xa0 workflows \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0沒有東西，後來發現我們在codespaces創資料夾的時候沒有打 /workflows，結果這個錯誤讓我們用了好 \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0久 。 \n', 'tags': '', 'url': 'W4 Replit 匯入replit_main2.7z來查看靜態網站內容，上傳latex作業.html'}, {'title': 'W5影片分工', 'text': 'w5心得：今天作業是製作逐字稿，我將教學影片用成mp4後，丟到whisper Desktop請他自動產生txt 檔 ，和srt檔 \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 之後對照影片確認去對稿，好了之後再用上字幕的軟體將MP4和srt檔丟進去之後就開始播放影片看字幕塊 \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 有沒有跟聲音一致，還可以順便校閱第二次稿，好了之後在輸出成mp4檔，這過程還蠻快速的，比自己照 \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0影片打字快很多，不過要處理的影片比較多目前還沒用好，之後再貼上去。 \n \n 逐字稿檔案: 逐字稿7 \xa0 逐字稿8 \xa0 逐字稿9 \xa0 逐字稿10 \xa0 逐字稿11 \xa0 逐字稿12 \xa0 逐字稿13 \xa0 逐字稿14 \n 影片字幕:\xa0 8.mp4 \xa0 9.mp4 \xa0 10.mp4 \xa0 11.mp4 \xa0\xa0 12.mp4 \xa0 13.mp4 \xa0 14.mp4 \xa0 \n 字幕檔: \n', 'tags': '', 'url': 'W5影片分工.html'}, {'title': 'W6協同NX零組件CoppeliaSim場景模擬相關檔案格式', 'text': 'W6心得:這禮拜課程進度主要修改了團隊main.yml的內容和製作中英並列的論文翻譯，還有下載可攜式的NX檔案 \n 中英並列的論文翻譯: 41039138中英並列論文 \n 個人自評:79 \n 團隊自評:80 \n \n \n \n', 'tags': '', 'url': 'W6協同NX零組件CoppeliaSim場景模擬相關檔案格式.html'}, {'title': '第八組', 'text': '組長:41039138 凃家豐 \n 組員：41023132 林秉賢 \n', 'tags': '', 'url': '第八組.html'}, {'title': 'Homework', 'text': '翻譯P45-87\xa0  /downloads/Homwork 個人部分.pdf \n', 'tags': '', 'url': 'Homework.html'}, {'title': 'Cmsimde', 'text': "SMap  - 網站地圖 - 依序排列網站的所有頁面。 \n EditA  - 編輯所有頁面 - 將所有頁面放入編輯模式中，主要用於處理頁面遷移、刪除或決定衝突頁面內容版本。 \n 編輯 -編輯頁面-先選擇要編輯的單一頁面後，再點選編輯，即可進入單一頁面的編輯模式。 \n 配置 - 設定網站 - 編輯頁面標題與管理員密碼。 \n 搜尋 - 動態頁面內容的關鍵字搜尋。 \n IUpload  - 圖片檔案上傳 - 圖檔的上傳功能，可以上傳jpg、png和gif文件，其中若在手機上傳圖文件，系統會自動將圖片檔案縮小為800x800大小。 \n IList  - 圖片檔案清單 - 上市可以直接在頁面編輯模式中引用的圖片檔案。 \n FUpload  - 檔案上傳 - 一般檔案的上傳功能，目前可以上傳的檔案副檔名包括 'jpg', 'png', 'gif', '7z', 'pdf', 'zip', 'ttt', 'stl '、'txt'、'html'、'mp4'等，使用者可以自行修改。 \n FList  - 文件清單 - 上市可以直接在頁面編輯模式中引用的上傳文件。 \n 登出 -登出頁面編輯模式。 \n 轉換 - 將動態網站中位於 config/content.htm 文件，透過分頁設定轉為內容目錄中的靜態網頁。 \n acp  - git add、git commit 和 git Push，通常只能在 localhost 或自架主機上網頁表單協助將以太坊改版內容推送到 Github 使用。 \n SStatic  - 啟動靜態網站 - 利用Python啟動網站伺服器功能，可以讓使用者檢查轉檔後的靜態網站內容。 \n RStatic  - Replit 靜態網站 URL - 僅用於 Replit 模式，當使用者點擊 SStatic 後，可以點擊 RStatic 進入尚未推向 Github Pages 的靜態網站。 \n 80  - 由 init.py 中 static_port 決定的連結字符串，一般不使用 80，僅在 Replit 中為了與動態網站佔用端口，才特別設為 80。 \n \n", 'tags': '', 'url': 'Cmsimde.html'}, {'title': 'Replit', 'text': 'replit_main2.7z \n 可以利用\xa0 python3 main2.py查看靜態網站 \n https://replit.com \n 利用 init_replit 指令安裝所需 Python 模組 chmod u+x init_replit  ./init_replit \n 複製時： \n .replit：python3 main.py \n chmod u+x cms init_replit \n ./init_replit \n 對於 cmsimde_site （不需要）： git submodule update --init --recursive \n 對於 cmsimde：pip installflaskflask_corsbs4lxmlpelicanmarkdowngevent \n 密碼產生器：\xa0  https://mde.tw/cmsite/content/Brython.html ?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3485858500000m Python \xa0 \n \n 僅適用於 IPv6 Ubuntu： .ssh 目錄中的配置，將 SSH 會話名稱設為 github.com： 主機 github.com 使用者 git 主機名稱 github.com  ProxyCommand /usr/bin/ncat --proxy p4.cycu.org: 3128 - -proxy-type http %h %p  for Replit:  .ssh 目錄中的配置，將 SSH 會話名稱設為 github.com: 主機 github.com 用戶 git 主機名稱 github.co  #since Replit 適用於IPv4，因此沒有ProxyCommand 設定需要 #ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p \n \n \n', 'tags': '', 'url': 'Replit.html'}, {'title': 'Bython', 'text': 'https://en.wikipedia.org/wiki/Python_（程式語言） \n 例子： \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python教學： \n https://docs.python.org/3/tutorial/ \n Python 的非正式介紹 \n 縮排（Python 採用 4 個 Spaces 縮排，以介面執行範圍） \n 變數（ Python 關鍵字 ） \n 註（#單行註解、三單標註或三雙標註標註多行註解） \n 數 (整數 int(), 浮點數 float()) \n 字串 （字符串） \n print (Python 內建函數,  print() 函式) \n Python是控制流程工具 \n 為了 \n 如果 \n 範圍 \n 打開 \n 讀 \n 清單 \n 元組 \n 字典 \n 功能 \n 嘗試...除了 \n 休息 \n 經過 \n 類別 \n 此頁面示範如何在同一頁面下納入多個線上Ace編輯器與執行按鈕（ practice_html.txt 動態頁面超檔案）。 \n Practice_html.txt 動態頁面超檔案應該可以在啟動 Brython 時，設定會將 .py 檔案放入 downloads/py 目錄中引用。 \n 也即將所有對應的 html 也使用 Brython 產生，然後編寫為 類別 後，在範例匯入時透過 實例 引用。 \n <!-- 啟動 Brython --> \n<腳本> \n視窗.onload=函數(){ \nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']}); \n} \n</腳本> \n 從1累加到100： \n 1 加到 100 \n 將 iterable 與 iterator 相關說明 ，利用 Brython 與 Ace Editor 整理在此頁面。 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n 檔案名稱： .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n 跑步   輸出   明確輸出區 清晰的繪圖區 重新載入 \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束  \n \n  ##########################################  \n 從1累加到100第2部分： \n 1 加到 100 cango_三_齒輪 BS蛇 人工智慧俄羅斯方塊 旋轉塊 \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n 檔案名稱： .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n 跑步   輸出   明確輸出區 清晰的繪圖區 重新載入 \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n \n', 'tags': '', 'url': 'Bython.html'}]};